version: '3.9'

networks:
  app-network:
    driver: bridge

services:
  frontend:
    build:
      context: ./frontend
      # No target specified - uses the last stage in Dockerfile (production)
    image: cn-summer-frontend:prod
    container_name: cn-summer-frontend
    restart: unless-stopped
    ports:
      - "80:80"
    networks:
      - app-network
    environment:
      - NODE_ENV=production
      - VITE_API_URL=/api  # Will be proxied by Nginx
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--spider", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G

  backend:
    build:
      context: ./backend
      # No target specified - uses the last stage in Dockerfile (production)
    image: cn-summer-backend:prod
    container_name: cn-summer-backend
    restart: unless-stopped
    ports:
      - "5000:5000"
    networks:
      - app-network
    environment:
      - NODE_ENV=production
      - PORT=5000
      - DATABASE_URL=postgres://${DB_USER}:${DB_PASSWORD}@db:5432/${DB_NAME}
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--spider", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G

  db:
    image: postgres:15-alpine
    container_name: cn-summer-db
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-postgres}
      POSTGRES_DB: ${DB_NAME:-cnsummer}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./db/init:/docker-entrypoint-initdb.d  # For initialization scripts
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-postgres} -d ${DB_NAME:-cnsummer}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for caching (optional)
  # redis:
  #   image: redis:7-alpine
  #   container_name: cn-summer-redis
  #   restart: unless-stopped
  #   ports:
  #     - "6379:6379"
  #   volumes:
  #     - redis_data:/data
  #   networks:
  #     - app-network
  #   healthcheck:
  #     test: ["CMD", "redis-cli", "ping"]
  #     interval: 10s
  #     timeout: 5s
  #     retries: 5

volumes:
  postgres_data:
  # redis_data:

# Uncomment for production deployment with Traefik
#   traefik:
#     image: traefik:v2.10
#     container_name: traefik
#     command:
#       - "--providers.docker=true"
#       - "--providers.docker.exposedbydefault=false"
#       - "--entrypoints.web.address=:80"
#       - "--entrypoints.web.http.redirections.entryPoint.to=websecure"
#       - "--entrypoints.web.http.redirections.entryPoint.scheme=https"
#       - "--entrypoints.websecure.address=:443"
#       - "--entrypoints.websecure.http.tls=true"
#       - "--certificatesresolvers.myresolver.acme.httpchallenge=true"
#       - "--certificatesresolvers.myresolver.acme.httpchallenge.entrypoint=web"
#       - "--certificatesresolvers.myresolver.acme.email=${LETSENCRYPT_EMAIL}"
#       - "--certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json"
#     ports:
#       - "80:80"
#       - "443:443"
#     volumes:
#       - "/var/run/docker.sock:/var/run/docker.sock:ro"
#       - "traefik-certs:/letsencrypt"
#     networks:
#       - app-network
